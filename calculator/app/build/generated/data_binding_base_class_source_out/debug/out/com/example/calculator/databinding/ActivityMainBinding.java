// Generated by view binder compiler. Do not edit!
package com.example.calculator.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.calculator.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton btn0;

  @NonNull
  public final MaterialButton btn1;

  @NonNull
  public final MaterialButton btn2;

  @NonNull
  public final MaterialButton btn3;

  @NonNull
  public final MaterialButton btn4;

  @NonNull
  public final MaterialButton btn5;

  @NonNull
  public final MaterialButton btn6;

  @NonNull
  public final MaterialButton btn7;

  @NonNull
  public final MaterialButton btn8;

  @NonNull
  public final MaterialButton btn9;

  @NonNull
  public final MaterialButton btnAdd;

  @NonNull
  public final MaterialButton btnAllclear;

  @NonNull
  public final MaterialButton btnBack;

  @NonNull
  public final MaterialButton btnClear;

  @NonNull
  public final MaterialButton btnDivide;

  @NonNull
  public final MaterialButton btnDot;

  @NonNull
  public final MaterialButton btnEqual;

  @NonNull
  public final MaterialButton btnModulo;

  @NonNull
  public final MaterialButton btnMultiply;

  @NonNull
  public final MaterialButton btnSubtract;

  @NonNull
  public final TextView dataTv;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final TextView resultTv;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull MaterialButton btn0,
      @NonNull MaterialButton btn1, @NonNull MaterialButton btn2, @NonNull MaterialButton btn3,
      @NonNull MaterialButton btn4, @NonNull MaterialButton btn5, @NonNull MaterialButton btn6,
      @NonNull MaterialButton btn7, @NonNull MaterialButton btn8, @NonNull MaterialButton btn9,
      @NonNull MaterialButton btnAdd, @NonNull MaterialButton btnAllclear,
      @NonNull MaterialButton btnBack, @NonNull MaterialButton btnClear,
      @NonNull MaterialButton btnDivide, @NonNull MaterialButton btnDot,
      @NonNull MaterialButton btnEqual, @NonNull MaterialButton btnModulo,
      @NonNull MaterialButton btnMultiply, @NonNull MaterialButton btnSubtract,
      @NonNull TextView dataTv, @NonNull LinearLayout linearLayout, @NonNull TextView resultTv) {
    this.rootView = rootView;
    this.btn0 = btn0;
    this.btn1 = btn1;
    this.btn2 = btn2;
    this.btn3 = btn3;
    this.btn4 = btn4;
    this.btn5 = btn5;
    this.btn6 = btn6;
    this.btn7 = btn7;
    this.btn8 = btn8;
    this.btn9 = btn9;
    this.btnAdd = btnAdd;
    this.btnAllclear = btnAllclear;
    this.btnBack = btnBack;
    this.btnClear = btnClear;
    this.btnDivide = btnDivide;
    this.btnDot = btnDot;
    this.btnEqual = btnEqual;
    this.btnModulo = btnModulo;
    this.btnMultiply = btnMultiply;
    this.btnSubtract = btnSubtract;
    this.dataTv = dataTv;
    this.linearLayout = linearLayout;
    this.resultTv = resultTv;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_0;
      MaterialButton btn0 = ViewBindings.findChildViewById(rootView, id);
      if (btn0 == null) {
        break missingId;
      }

      id = R.id.btn_1;
      MaterialButton btn1 = ViewBindings.findChildViewById(rootView, id);
      if (btn1 == null) {
        break missingId;
      }

      id = R.id.btn_2;
      MaterialButton btn2 = ViewBindings.findChildViewById(rootView, id);
      if (btn2 == null) {
        break missingId;
      }

      id = R.id.btn_3;
      MaterialButton btn3 = ViewBindings.findChildViewById(rootView, id);
      if (btn3 == null) {
        break missingId;
      }

      id = R.id.btn_4;
      MaterialButton btn4 = ViewBindings.findChildViewById(rootView, id);
      if (btn4 == null) {
        break missingId;
      }

      id = R.id.btn_5;
      MaterialButton btn5 = ViewBindings.findChildViewById(rootView, id);
      if (btn5 == null) {
        break missingId;
      }

      id = R.id.btn_6;
      MaterialButton btn6 = ViewBindings.findChildViewById(rootView, id);
      if (btn6 == null) {
        break missingId;
      }

      id = R.id.btn_7;
      MaterialButton btn7 = ViewBindings.findChildViewById(rootView, id);
      if (btn7 == null) {
        break missingId;
      }

      id = R.id.btn_8;
      MaterialButton btn8 = ViewBindings.findChildViewById(rootView, id);
      if (btn8 == null) {
        break missingId;
      }

      id = R.id.btn_9;
      MaterialButton btn9 = ViewBindings.findChildViewById(rootView, id);
      if (btn9 == null) {
        break missingId;
      }

      id = R.id.btn_add;
      MaterialButton btnAdd = ViewBindings.findChildViewById(rootView, id);
      if (btnAdd == null) {
        break missingId;
      }

      id = R.id.btn_allclear;
      MaterialButton btnAllclear = ViewBindings.findChildViewById(rootView, id);
      if (btnAllclear == null) {
        break missingId;
      }

      id = R.id.btn_back;
      MaterialButton btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.btn_clear;
      MaterialButton btnClear = ViewBindings.findChildViewById(rootView, id);
      if (btnClear == null) {
        break missingId;
      }

      id = R.id.btn_divide;
      MaterialButton btnDivide = ViewBindings.findChildViewById(rootView, id);
      if (btnDivide == null) {
        break missingId;
      }

      id = R.id.btn_dot;
      MaterialButton btnDot = ViewBindings.findChildViewById(rootView, id);
      if (btnDot == null) {
        break missingId;
      }

      id = R.id.btn_equal;
      MaterialButton btnEqual = ViewBindings.findChildViewById(rootView, id);
      if (btnEqual == null) {
        break missingId;
      }

      id = R.id.btn_modulo;
      MaterialButton btnModulo = ViewBindings.findChildViewById(rootView, id);
      if (btnModulo == null) {
        break missingId;
      }

      id = R.id.btn_multiply;
      MaterialButton btnMultiply = ViewBindings.findChildViewById(rootView, id);
      if (btnMultiply == null) {
        break missingId;
      }

      id = R.id.btn_subtract;
      MaterialButton btnSubtract = ViewBindings.findChildViewById(rootView, id);
      if (btnSubtract == null) {
        break missingId;
      }

      id = R.id.data_tv;
      TextView dataTv = ViewBindings.findChildViewById(rootView, id);
      if (dataTv == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.result_tv;
      TextView resultTv = ViewBindings.findChildViewById(rootView, id);
      if (resultTv == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, btn0, btn1, btn2, btn3, btn4,
          btn5, btn6, btn7, btn8, btn9, btnAdd, btnAllclear, btnBack, btnClear, btnDivide, btnDot,
          btnEqual, btnModulo, btnMultiply, btnSubtract, dataTv, linearLayout, resultTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
